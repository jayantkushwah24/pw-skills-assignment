Q2. Describe the categorization of operators in JavaScript based on their functionality. Provide examples for
each category.

JavaScript operators can be categorized based on their functionality into several groups. Here are the main categories:

Arithmetic Operators:

Perform arithmetic calculations on numeric values.
Examples:

let x = 10;
let y = 5;

let addition = x + y;      // Addition
let subtraction = x - y;   // Subtraction
let multiplication = x * y; // Multiplication
let division = x / y;       // Division
let modulus = x % y;        // Modulus (remainder)
Comparison Operators:

Compare two values and return a boolean result (true or false).
Examples:

let a = 10;
let b = 5;

console.log(a > b);  // Greater than
console.log(a < b);  // Less than
console.log(a === b); // Equal to (strict equality)
console.log(a !== b); // Not equal to (strict inequality)
Logical Operators:

Perform logical operations and return a boolean result.
Examples:

let isTrue = true;
let isFalse = false;

console.log(isTrue && isFalse); // Logical AND
console.log(isTrue || isFalse); // Logical OR
console.log(!isTrue);            // Logical NOT
Assignment Operators:

Assign values to variables.
Examples:

let x = 10;
x += 5;  // Equivalent to x = x + 5
x -= 3;  // Equivalent to x = x - 3
x *= 2;  // Equivalent to x = x * 2
Unary Operators:

Operate on a single operand.
Examples:

let num = 5;
console.log(-num);   // Unary negation
console.log(++num);  // Increment
console.log(--num);  // Decrement
Conditional (Ternary) Operator:

Provides a shorthand way of writing conditional statements.
Example:

let age = 20;
let message = (age >= 18) ? "Adult" : "Minor";
String Concatenation Operator:

Concatenates two strings.
Example:

let firstName = "John";
let lastName = "Doe";
let fullName = firstName + " " + lastName;
These are some of the main categories of operators in JavaScript, each serving a specific purpose in performing operations, comparisons, and manipulations within a program.