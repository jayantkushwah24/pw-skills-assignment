Q4. Discuss the precedence and associativity of operators in JavaScript. Why is understanding these concepts
important?

Operator Precedence determines the order in which operators are evaluated in an expression. Operators with higher
 precedence are evaluated first. For example, in the expression 3 + 4 * 5, the multiplication (*) has higher
  precedence, so it's evaluated first, resulting in 3 + (4 * 5).

Associativity comes into play when multiple operators with the same precedence appear in an expression.
 Associativity determines the order in which operators of the same precedence are evaluated. For example, 
 the addition (+) operator is left-associative, so in the expression 6 - 3 + 2, it's evaluated from left to 
 right: (6 - 3) + 2.

Understanding these concepts is important for several reasons:

Correct Evaluation: Knowing the precedence ensures that expressions are evaluated in the intended order.
 Without this knowledge, you might get unexpected results.

Code Readability: When you understand operator precedence and associativity, you can write more readable code.
 However, it's crucial to use parentheses to make your intentions explicit, even when the default precedence and
  associativity work in your favor.

Avoiding Bugs: Misunderstanding precedence and associativity can lead to bugs in your code. Explicitly using
 parentheses when needed helps prevent unintended behavior.

Example:
Consider the following expression:


let result = 3 + 4 * 5 / 2;
Understanding operator precedence and associativity, the expression is equivalent to 3 + ((4 * 5) / 2). 
Multiplication and division have higher precedence than addition, so they are evaluated first.

However, if you want a different order of evaluation, you can use parentheses to make your intentions explicit:


let result = (3 + 4) * 5 / 2;
In this case, the addition is performed first due to the parentheses.

In summary, understanding operator precedence and associativity is crucial for writing correct and readable code.
 It helps you avoid unexpected results and ensures that expressions are evaluated in the order you intend.