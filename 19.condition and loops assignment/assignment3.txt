Q3. What are loops, and what do we need them? Explain different types of loops with their syntax and
examples.



Loops in JavaScript are used to repeatedly execute a block of code as long as a specified condition is true. They are essential for automating repetitive tasks and iterating over collections of data such as arrays. JavaScript supports several types of loops: for, while, do-while, and the newer for...of and for...in loops.

1. For Loop:
Syntax:
for (initialization; condition; update) {
    // code block to be executed
}
Example:
javascript
Copy code
for (let i = 0; i < 5; i++) {
    console.log(i);
}
This loop will print the values from 0 to 4 to the console.

2. While Loop:
Syntax:
while (condition) {
    // code block to be executed
}
Example:
let i = 0;

while (i < 5) {
    console.log(i);
    i++;
}
This loop will also print the values from 0 to 4. The condition is checked before the execution of the loop.

3. Do-While Loop:
Syntax:
do {
    // code block to be executed
} while (condition);
Example:
let i = 0;

do {
    console.log(i);
    i++;
} while (i < 5);
Similar to the while loop, the do-while loop executes the code block at least once before checking the condition.

4. For...of Loop:
The for...of loop is specifically designed for iterating over iterable objects like arrays, strings, etc.

Syntax:
for (variable of iterable) {
    // code block to be executed
}
Example:
let colors = ['red', 'green', 'blue'];

for (let color of colors) {
    console.log(color);
}
This loop will print each color in the colors array.

5. For...in Loop:
The for...in loop is used to iterate over the properties of an object.

Syntax:
for (variable in object) {
    // code block to be executed
}
Example:
let person = { name: 'John', age: 30, job: 'developer' };

for (let key in person) {
    console.log(key + ': ' + person[key]);
}
This loop will print each property and its corresponding value in the person object.

Loops are essential in JavaScript to iterate over data, perform repetitive tasks, and make your code more efficient and concise. The choice of loop depends on the specific requirements of the task at hand.